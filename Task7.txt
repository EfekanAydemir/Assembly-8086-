; Efekan Aydemir

org 100h

start:

generateRandomNumber:
MOV AH,00H
INT 1AH

MOV AX,DX
MOV DX,0
MOV BX,10
DIV BX

MOV randomNum,DL
ADD DL,'0'
MOV print_random[0FH],DL  ; END OF GENERATE RANDOM

; for NPC below
MOV AH,00H
INT 1AH

MOV AX,DX
MOV DX,0
MOV BX,10
DIV BX

MOV randomNPC,DL  ; END OF GENERATE RANDOM
MOV AL,DL
CALL numberToSevenDisplayN

take_input:

back_to_input:
LEA DX, msg
MOV AH,09H
INT 21H
MOV AH, 01H
INT 21H

CMP AL,39H
JG not_in_bound
CMP AL,2FH
JLE not_in_bound

SUB AL ,'0'
MOV userNum, AL

CALL numberToSevenDisplayU

MOV dl, 10
MOV ah, 02h
INT 21h
MOV dl, 13
MOV ah, 02h
INT 21h

JMP clear_all

fck_go_back:

;seven's adress
MOV CX,8H
MOV DX,2030H
MOV SI,0
JMP print_in_seven

comparision:
; codes for dot display
MOV CX, 28H
MOV DX,2000H
MOV SI,0

MOV AL,userNum
MOV BL,randomNum
SUB AL,BL
CMP AL,0
JLE take_absolute_user
BACK_USER:
MOV tempArray[0],AL ; user-random

MOV AL,randomNPC
MOV BL,randomNum
SUB AL,BL
CMP AL,0
JLE take_absolute_npc
BACK_NPC:
MOV tempArray[1],AL ; npc-random

MOV AL,tempArray[0] ;user-rand
MOV BL,tempArray[1] ;npc-rand

CMP AL,BL
JE print_tie
JG print_npcW
JMP print_userW

print_in_seven:
MOV AL, seven_display[SI]
OUT DX,AL
INC SI
INC DX

LOOP print_in_seven

MOV DX,2040H
MOV CX,10H
MOV SI,0


JMP comparision

MOV CX,10H
MOV DX,2040H
MOV SI,0

print_in_lcd:
MOV AL,print_random[SI]
OUT DX,AL
INC SI
INC DX
LOOP print_in_lcd
JMP endall

PROC numberToSevenDisplayU
    CMP AL,0
    JE ZERO
    CMP AL,1
    JE ONE
    CMP AL,2
    JE TWO
    CMP AL,3
    JE THREE
    CMP AL,4
    JE FOUR
    CMP AL,5
    JE FIVE
    CMP AL,6
    JE SIX
    CMP AL,7
    JE SEVEN
    CMP AL,8
    JE EIGHT
    CMP AL,9
    JE NINE
    
       
    ZERO: MOV seven_display[2], 00111111b 
    JMP FINISH 
    ONE:  MOV seven_display[2], 00000110b 
    JMP FINISH
    TWO:  MOV seven_display[2], 01011011b 
    JMP FINISH
    THREE:MOV seven_display[2], 01001111b 
    JMP FINISH
    FOUR: MOV seven_display[2], 01100110b 
    JMP FINISH
    FIVE: MOV seven_display[2], 01101101b 
    JMP FINISH
    SIX:  MOV seven_display[2], 01111101b 
    JMP FINISH
    SEVEN:MOV seven_display[2], 00000111b 
    JMP FINISH
    EIGHT:MOV seven_display[2], 01111111b 
    JMP FINISH
    NINE: MOV seven_display[2], 01101111b 
    JMP FINISH
    
    FINISH:    
    ret
Endp


PROC numberToSevenDisplayN
    CMP AL,0
    JE ZERO1
    CMP AL,1
    JE ONE1
    CMP AL,2
    JE TWO1
    CMP AL,3
    JE THREE1
    CMP AL,4
    JE FOUR1
    CMP AL,5
    JE FIVE1
    CMP AL,6
    JE SIX1
    CMP AL,7
    JE SEVEN1
    CMP AL,8
    JE EIGHT1
    CMP AL,9
    JE NINE1
    
       
    ZERO1: MOV seven_display[7], 00111111b 
    JMP FINISH1
    ONE1:  MOV seven_display[7], 00000110b 
    JMP FINISH1
    TWO1:  MOV seven_display[7], 01011011b 
    JMP FINISH1
    THREE1:MOV seven_display[7], 01001111b 
    JMP FINISH1
    FOUR1: MOV seven_display[7], 01100110b 
    JMP FINISH1
    FIVE1: MOV seven_display[7], 01101101b 
    JMP FINISH1
    SIX1:  MOV seven_display[7], 01111101b 
    JMP FINISH1
    SEVEN1:MOV seven_display[7], 00000111b 
    JMP FINISH1
    EIGHT1:MOV seven_display[7], 01111111b 
    JMP FINISH1
    NINE1: MOV seven_display[7], 01101111b 
    JMP FINISH1
    
    FINISH1:
        
    ret
Endp

not_in_bound:
MOV dl, 10
MOV ah, 02h
INT 21h
MOV dl, 13
MOV ah, 02h
INT 21h

LEA DX, warning
MOV AH,09H
INT 21H

MOV dl, 10
MOV ah, 02h
INT 21h
MOV dl, 13
MOV ah, 02h
INT 21h

JMP take_input

clear_all:

;seven's adress
MOV CX,8H
MOV DX,2030H
MOV AL,zeroNum
clean_seven:
OUT DX,AL
INC DX 
LOOP clean_seven

;dot' adress
MOV CX, 28H
MOV DX,2000H
MOV AL,zeroNum
clean_dot:
OUT DX,AL
INC DX
LOOP clean_dot

;lcd' adress
MOV CX,10H
MOV DX,2040H
MOV AL,white_char
clean_lcd:
OUT DX,AL
INC DX
LOOP clean_lcd

JMP fck_go_back

;end-of-clear

take_absolute_user:
NEG AL
JMP BACK_USER

take_absolute_npc:
NEG AL
JMP BACK_NPC

print_userW:
MOV AL, DOTS_U_WINS[SI]
OUT DX,AL
INC DX
INC SI
LOOP print_userW
MOV CX,10H
MOV DX,2040H
MOV SI,0
JMP print_in_lcd


print_npcW:
MOV AL, DOTS_C_WINS[SI]
OUT DX,AL
INC DX
INC SI
LOOP print_npcW
MOV CX,10H
MOV DX,2040H
MOV SI,0
JMP print_in_lcd

print_tie:
MOV AL, DOTS_TIE[SI]
OUT DX,AL
INC DX
INC SI
LOOP print_tie
MOV CX,10H
MOV DX,2040H
MOV SI,0
JMP print_in_lcd


endall:
JMP start

ret

NUMBERS DB 00111111b, 00000110b, 01011011b, 01001111b, 01100110b, 01101101b, 01111101b, 00000111b, 01111111b, 01101111b 
DOTS_U_WINS DB 01111111b, 01000000b, 01000000b, 01000000b, 01111111b ;U
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ;
 DB 01111111b, 00100000b, 00011000b, 00100000b, 01111111b ;W
 DB 00000000b, 00000000b, 01111111b, 00000000b, 00000000b ;I
 DB 01111111b, 00000100b, 00001000b, 00010000b, 01111111b ;N
 DB 01001111b, 01001001b, 01001001b, 01001001b, 01111001b ;S
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ;
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ; 
 
DOTS_C_WINS DB 00111110b, 01000001b, 01000001b, 01000001b, 00100010b ;C
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ;
 DB 01111111b, 00100000b, 00011000b, 00100000b, 01111111b ;W
 DB 00000000b, 00000000b, 01111111b, 00000000b, 00000000b ;I
 DB 01111111b, 00000100b, 00001000b, 00010000b, 01111111b ;N
 DB 01001111b, 01001001b, 01001001b, 01001001b, 01111001b ;S
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ;
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ; 
 
DOTS_TIE DB 00000000b, 00000000b, 01111111b, 00000000b, 00000000b ;I
 DB 00000001b, 00000001b, 01111111b, 00000001b, 00000001b ;T
 DB 01001111b, 01001001b, 01001001b, 01001001b, 01111001b ;S
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ;
 DB 00000001b, 00000001b, 01111111b, 00000001b, 00000001b ;T
 DB 00000000b, 00000000b, 01111111b, 00000000b, 00000000b ;I
 DB 01111111b, 01001001b, 01001001b, 01001001b, 01000001b ;E
 DB 00000000b, 00000000b, 00000000b, 00000000b, 00000000b ;

print_random db 'RANDOM NUMBER : $'
white_char db ' '
msg db 'Enter a number between 0-9 : $'
warning db 'Your number is not in the scope, Try again$'
zeroNum db 00000000b
randomNum db 0
randomNPC db 0
userNum db 0
tempArray db 0,0,0,0,0


seven_display db 00111110b, 01000000b, 00000000b, 00000000b,00000000b , 00111001b, 01000000b,00000000b,00000000b




